openapi: 3.0.3
info:
  version: dev
  title: Worklist
servers:
  - url: localhost:3000
paths:
  /list:
    get:
      summary: List available Worklists
      operationId: listWorklists
      tags:
        - worklist
      responses:
        '200':
          description: List of available worklists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessWorklistListResponseBody'
        '400':
          $ref: '#/components/responses/ClientErrorResponse'
        '401':
          $ref: '#/components/responses/ClientErrorUnauthorized'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'
    post:
      summary: Create new Worklist
      operationId: createWorklist
      tags:
        - worklist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Worklist'
      responses:
        '200':
          description: Worklist is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
        '400':
          $ref: '#/components/responses/ClientErrorResponse'
        '401':
          $ref: '#/components/responses/ClientErrorUnauthorized'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'
  /list/{listId}:
    get:
      summary: Get Worklist details
      operationId: getWorklist
      tags:
        - worklist
      parameters:
        - in: path
          name: listId
          description: Existing Worklist Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Requested worklist details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
        '400':
          $ref: '#/components/responses/ClientErrorResponse'
        '401':
          $ref: '#/components/responses/ClientErrorUnauthorized'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'
    put:
      summary: Update existing Worklist
      operationId: updateWorklist
      tags:
        - worklist
      parameters:
        - in: path
          name: listId
          description: Existing Worklist Id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Worklist'
      responses:
        '200':
          description: Worklist is updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
        '400':
          $ref: '#/components/responses/ClientErrorResponse'
        '401':
          $ref: '#/components/responses/ClientErrorUnauthorized'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'
    delete:
      summary: Delete existing Worklist
      operationId: deleteWorklist
      tags:
        - worklist
      parameters:
        - in: path
          name: listId
          description: Existing Worklist Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Worklist is deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worklist'
        '400':
          $ref: '#/components/responses/ClientErrorResponse'
        '401':
          $ref: '#/components/responses/ClientErrorUnauthorized'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'
  /list/{listId}/execute:
    post:
      summary: Execute existing Worklist
      operationId: executeWorklist
      tags:
        - worklist
      parameters:
        - in: path
          name: listId
          description: Existing Worklist Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          $ref: '#/components/responses/ClientErrorResponse'
        '401':
          $ref: '#/components/responses/ClientErrorUnauthorized'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'
  /list/{listId}/stats:
    post:
      summary: Execute existing Worklist
      operationId: executeWorklist
      tags:
        - worklist
      parameters:
        - in: path
          name: listId
          description: Existing Worklist Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          $ref: '#/components/responses/ClientErrorResponse'
        '401':
          $ref: '#/components/responses/ClientErrorUnauthorized'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'
components:
  schemas:
    Worklist:
      type: object
      required:
        - name
        - description
      properties:
        id:
          type: integer
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        query:
          type: string
        participants:
          type: array
          items:
            type: string
    SuccessWorklistListResponseBody:
      type: object
      description: |
        Structure made to hold response
      properties:
        resources:
          items:
            $ref: '#/components/schemas/Worklist'
          type: array
    ClientErrorResponse:
      type: object
      description: |
        Error related with client request

        Example:
        ```json
        {
          "message": "there needs to be at least one new member in body",
          "code": 400,
          "type": "Bad Request",
          "detailedMessage": "there needs to be at least one new member in body",
          "details": {
            "error": [
              "missing id"
              ]

          }
        }
        ```
      properties:
        message:
          type: string
          example: there needs to be at least one new member in body
          description: Message describing error
        code:
          type: integer
          format: int64
          description: HTTP response code
          example: 400
        type:
          type: string
          example: Bad Request
          description: Type of error
        detailedMessage:
          type: string
          description: The Actual error (if any) that could have caused this issue
          example: there needs to be at least one new member in body
        details:
          type: object
          description: Additional informations about error
          additionalProperties:
            type: array
            items:
              type: string
          example:
            error:
              - missing id
    ClientErrorUnauthorized:
      type: object
      description: |
        Error send when client is not authorized

        Example:
        ```json
        {
          "message": "Search returned an error",
          "code": 401,
          "type": "Unauthorized",
          "detailedMessage": "unauthorized"
        }
        ```
      properties:
        message:
          type: string
          example: there needs to be at least one new member in body
          description: Message describing error
        code:
          type: integer
          format: int64
          description: HTTP response code
          example: 401
        type:
          type: string
          example: Unauthorized
          description: Type of error
        detailedMessage:
          type: string
          description: The Actual error (if any) that could have caused this issue
          example: unauthorized
    ClientErrorResourceNotFound:
      type: object
      description: |
        Error send when client search for resource that do not exist

        Example:
        ```json
        {
          "message": "could not find Care Team",
          "code": 404,
          "type": "Not Found",
          "detailedMessage": "resource not found"
        }
        ```
      properties:
        message:
          type: string
          example: could not find Care Team
          description: Message describing error
        code:
          type: integer
          format: int64
          description: HTTP response code
          example: 404
        type:
          type: string
          example: Not Found
          description: Type of error
        detailedMessage:
          type: string
          description: resource not found
    ServerErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    ClientErrorResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientErrorResponse'
    ClientErrorUnauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientErrorUnauthorized'
    ClientErrorResourceNotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientErrorResourceNotFound'
    ServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
